Help on module pydnp3.asiodnp3 in pydnp3:

NAME
    pydnp3.asiodnp3 - Bindings for asiodnp3 namespace

CLASSES
    pybind11_builtins.pybind11_object(builtins.object)
        DNP3Manager
        DatabaseConfig
        Error
        ErrorCategory
        IChannelListener
            PrintingChannelListener
        IListenCallbacks
            DefaultListenCallbacks
        IMasterScan
        ISessionAcceptor
        MasterStackConfig
        OutstationStackConfig
        UpdateBuilder
        Updates
        X509Info
        is_error_code_enum
        shared_updates_t
        update_func_t
    pydnp3.asiopal.IResource(pybind11_builtins.pybind11_object)
        IChannel
        IStack
            IOutstation
    pydnp3.asiopal.TCPServer(pydnp3.asiopal.IListener)
        MasterTCPServer
    pydnp3.opendnp3.ICommandProcessor(pybind11_builtins.pybind11_object)
        IMasterOperations
            IMaster(IMasterOperations, IStack)
            IMasterSession
    pydnp3.opendnp3.IMasterApplication(pydnp3.opendnp3.ILinkListener, pydnp3.openpal.IUTCTimeSource)
        DefaultMasterApplication
    pydnp3.opendnp3.ISOEHandler(pydnp3.opendnp3.ITransactable)
        PrintingSOEHandler
    pydnp3.openpal.ILogHandler(pybind11_builtins.pybind11_object)
        ConsoleLogger
    pydnp3.openpal.StaticOnly(pybind11_builtins.pybind11_object)
        PrintingCommandCallback
    
    class ConsoleLogger(pydnp3.openpal.ILogHandler)
     |  LogHandler that prints all log messages to the console.
     |  
     |  Method resolution order:
     |      ConsoleLogger
     |      pydnp3.openpal.ILogHandler
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  Log(...)
     |      Log(self: pydnp3.asiodnp3.ConsoleLogger, entry: pydnp3.openpal.LogEntry) -> None
     |      
     |         Callback method for log messages. 
     |      :param entry: the log message to handle
     |  
     |  __init__(...)
     |      __init__(self: pydnp3.asiodnp3.ConsoleLogger, printLocation: bool = False) -> None
     |      
     |      :param printLocation: defaults to False
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  Create(...) from builtins.PyCapsule
     |      Create(printLocation: bool = False) -> pydnp3.openpal.ILogHandler
     |      
     |      :param printLocation: defaults to False 
     |      :return: shared_ptr to openpal.ILogHandler
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class DNP3Manager(pybind11_builtins.pybind11_object)
     |  Root DNP3 object used to create channels and sessions.
     |  
     |  Method resolution order:
     |      DNP3Manager
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  AddSerial(...)
     |      AddSerial(self: pydnp3.asiodnp3.DNP3Manager, id: str, levels: int, retry: pydnp3.asiopal.ChannelRetry, settings: pydnp3.asiopal.SerialSettings, listener: pydnp3.asiodnp3.IChannelListener) -> pydnp3.asiodnp3.IChannel
     |      
     |         Add a persistent TCP serial channel. 
     |      :param id: Alias that will be used for logging purposes with this channel 
     |      :param levels: Bitfield that describes the logging level for this channel and associated sessions 
     |      :param retry: Retry parameters for failed channels 
     |      :param settings: settings object that fully parameterizes the serial port 
     |      :param listener: optional callback interface (can be nullptr) for info about the running channel 
     |      :return: shared_ptr to a channel interface
     |  
     |  AddTCPClient(...)
     |      AddTCPClient(self: pydnp3.asiodnp3.DNP3Manager, id: str, levels: int, retry: pydnp3.asiopal.ChannelRetry, host: str, local: str, port: int, listener: pydnp3.asiodnp3.IChannelListener) -> pydnp3.asiodnp3.IChannel
     |      
     |         Add a persistent TCP client channel. Automatically attempts to reconnect.
     |      :param id: Alias that will be used for logging purposes with this channel 
     |      :param levels: Bitfield that describes the logging level for this channel and associated sessions 
     |      :param retry: Retry parameters for failed channels 
     |      :param host: IP address of remote outstation (i.e. 127.0.0.1 or www.google.com) 
     |      :param local: adapter address on which to attempt the connection (use 0.0.0.0 for all adapters) 
     |      :param port: Port of remote outstation is listening on 
     |      :param listener optional callback interface (can be nullptr) for info about the running channel 
     |      :return: shared_ptr to a channel interface
     |  
     |  AddTCPServer(...)
     |      AddTCPServer(self: pydnp3.asiodnp3.DNP3Manager, id: str, levels: int, retry: pydnp3.asiopal.ChannelRetry, endpoint: str, port: int, listener: pydnp3.asiodnp3.IChannelListener) -> pydnp3.asiodnp3.IChannel
     |      
     |         Add a persistent TCP server channel. Only accepts a single connection at a time. 
     |      :param id: Alias that will be used for logging purposes with this channel 
     |      :param levels: Bitfield that describes the logging level for this channel and associated sessions 
     |      :param retry: Retry parameters for failed channels 
     |      :param endpoint: Network adapter to listen on, i.e. 127.0.0.1 or 0.0.0.0 
     |      :param port: Port to listen on 
     |      :param listener: optional callback interface (can be nullptr) for info about the running channel 
     |      :return: shared_ptr to a channel interface
     |  
     |  AddTLSClient(...)
     |      AddTLSClient(self: pydnp3.asiodnp3.DNP3Manager, id: str, levels: int, retry: pydnp3.asiopal.ChannelRetry, host: str, local: str, port: int, config: pydnp3.asiopal.TLSConfig, listener: pydnp3.asiodnp3.IChannelListener, ec: std::error_code) -> pydnp3.asiodnp3.IChannel
     |      
     |         Add a TLS client channel. 
     |      :throw std::system_error Throws underlying ASIO exception of TLS configuration is invalid 
     |      :param id: Alias that will be used for logging purposes with this channel 
     |      :param levels: Bitfield that describes the logging level for this channel and associated sessions 
     |      :param retry: Retry parameters for failed channels 
     |      :param host: IP address of remote outstation (i.e. 127.0.0.1 or www.google.com) 
     |      :param local: adapter address on which to attempt the connection (use 0.0.0.0 for all adapters) 
     |      :param port: Port of remote outstation is listening on 
     |      :param config: TLS configuration information 
     |      :param listener: optional callback interface (can be nullptr) for info about the running channel 
     |      :param ec: An error code. If set, a nullptr will be returned 
     |      :return: shared_ptr to a channel interface
     |  
     |  AddTLSServer(...)
     |      AddTLSServer(self: pydnp3.asiodnp3.DNP3Manager, id: str, levels: int, retry: pydnp3.asiopal.ChannelRetry, endpoint: str, port: int, config: pydnp3.asiopal.TLSConfig, listener: pydnp3.asiodnp3.IChannelListener, ec: std::error_code) -> pydnp3.asiodnp3.IChannel
     |      
     |         Add a TLS server channel. 
     |      :throw std::system_error Throws underlying ASIO exception of TLS configuration is invalid 
     |      :param id: Alias that will be used for logging purposes with this channel 
     |      :param levels: Bitfield that describes the logging level for this channel and associated sessions 
     |      :param retry: Retry parameters for failed channels 
     |      :param endpoint: Network adapter to listen on, i.e. 127.0.0.1 or 0.0.0.0 
     |      :param port: Port to listen on 
     |      :param config: TLS configuration information 
     |      :param listener: optional callback interface (can be nullptr) for info about the running channel 
     |      :param ec: An error code. If set, a nullptr will be returned 
     |      :return: shared_ptr to a channel interface
     |  
     |  CreateListener(...)
     |      CreateListener(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. CreateListener(self: pydnp3.asiodnp3.DNP3Manager, loggerid: str, loglevel: pydnp3.openpal.LogFilters, endpoint: pydnp3.asiopal.IPEndpoint, callbacks: pydnp3.asiodnp3.IListenCallbacks, ec: std::error_code) -> pydnp3.asiopal.IListener
     |      
     |         Create a TCP listener that will be used to accept incoming connections. 
     |      :return: shared_ptr to a listener interface
     |      
     |      2. CreateListener(self: pydnp3.asiodnp3.DNP3Manager, loggerid: str, loglevel: pydnp3.openpal.LogFilters, endpoint: pydnp3.asiopal.IPEndpoint, config: pydnp3.asiopal.TLSConfig, callbacks: pydnp3.asiodnp3.IListenCallbacks, ec: std::error_code) -> pydnp3.asiopal.IListener
     |      
     |         Create a TLS listener that will be used to accept incoming connections. 
     |      :return: shared_ptr to a listener interface
     |  
     |  Shutdown(...)
     |      Shutdown(self: pydnp3.asiodnp3.DNP3Manager) -> None
     |      
     |      Permanently shutdown the manager and all sub-objects that have been created. Stop the thread pool.
     |  
     |  __del__(...)
     |      __del__(self: pydnp3.asiodnp3.DNP3Manager) -> None
     |      
     |      Destructor with gil_scoped_release.
     |  
     |  __init__(...)
     |      __init__(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. __init__(self: pydnp3.asiodnp3.DNP3Manager, concurrencyHint: int) -> None
     |      
     |      2. __init__(self: pydnp3.asiodnp3.DNP3Manager, concurrencyHint: int, handler: pydnp3.openpal.ILogHandler) -> None
     |      
     |      3. __init__(self: pydnp3.asiodnp3.DNP3Manager, concurrencyHint: int, handler: pydnp3.openpal.ILogHandler, onThreadStart: Callable[[], None]) -> None
     |      
     |      4. __init__(self: pydnp3.asiodnp3.DNP3Manager, concurrencyHint: int, handler: pydnp3.openpal.ILogHandler, onThreadStart: Callable[[], None], onThreadExit: Callable[[], None]) -> None
     |      
     |         Construct a manager: 
     |      :param concurrencyHint: How many threads to allocate in the thread pool 
     |      :param handler: Callback interface for log messages 
     |      :param onThreadStart Action to run when a thread pool thread starts 
     |      :param onThreadExit Action to run just before a thread pool thread exits
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class DatabaseConfig(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      DatabaseConfig
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__(self: pydnp3.asiodnp3.DatabaseConfig, sizes: pydnp3.opendnp3.DatabaseSizes) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  analog
     |  
     |  aoStatus
     |  
     |  binary
     |  
     |  boStatus
     |  
     |  counter
     |  
     |  doubleBinary
     |  
     |  frozenCounter
     |  
     |  sizes
     |  
     |  timeAndInterval
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class DefaultListenCallbacks(IListenCallbacks)
     |  Callback interface invoked when a new connection is accepted.
     |  
     |  Method resolution order:
     |      DefaultListenCallbacks
     |      IListenCallbacks
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  AcceptCertificate(...)
     |      AcceptCertificate(self: pydnp3.asiodnp3.DefaultListenCallbacks, sessionid: int, info: pydnp3.asiodnp3.X509Info) -> bool
     |      
     |         Ask user code if the following preverified certificate should be accepted. 
     |         If true, the certificate should be accepted, false otherwise. 
     |      :param sessionid: Incrementing id used to uniquely identify the session 
     |      :param info: Information from the x509 certificate 
     |      :type sessionid: unsigned long
     |  
     |  AcceptConnection(...)
     |      AcceptConnection(self: pydnp3.asiodnp3.DefaultListenCallbacks, sessionid: int, ipaddress: str) -> bool
     |      
     |         Ask user code if the following connection should be accepted. 
     |         If true, the connection is accepted and a link frame parser is created to handle incoming frame data.
     |      :param sessionid: Incrementing id used to uniquely identify the session 
     |      :param ipaddress: The IP address of the connecting host. Can optionally be used for connection filtering 
     |      :type sessionid: unsigned long
     |  
     |  GetFirstFrameTimeout(...)
     |      GetFirstFrameTimeout(self: pydnp3.asiodnp3.DefaultListenCallbacks) -> pydnp3.openpal.TimeDuration
     |      
     |      :return: the amount of time the session should wait for the first frame
     |  
     |  OnCertificateError(...)
     |      OnCertificateError(self: pydnp3.asiodnp3.DefaultListenCallbacks, sessionid: int, info: pydnp3.asiodnp3.X509Info, error: int) -> None
     |      
     |         Called when a certificate fails verification. 
     |      :param sessionid: Incrementing id used to uniquely identify the session 
     |      :param info: Information from the x509 certificate 
     |      :param error: Error code with reason for failed verification 
     |      :type sessionid: unsigned long
     |  
     |  OnConnectionClose(...)
     |      OnConnectionClose(self: pydnp3.asiodnp3.DefaultListenCallbacks, sessionid: int, session: pydnp3.asiodnp3.IMasterSession) -> None
     |      
     |         Called when a socket closes. 
     |      :param sessionid: Incrementing id used to uniquely identify the session 
     |      :param session: Possibly NULL shared_ptr to the master session if it was created 
     |      :type sessionid: unsigned long
     |  
     |  OnFirstFrame(...)
     |      OnFirstFrame(self: pydnp3.asiodnp3.DefaultListenCallbacks, sessionid: int, header: pydnp3.opendnp3.LinkHeaderFields, acceptor: pydnp3.asiodnp3.ISessionAcceptor) -> None
     |      
     |         Called when the first link-layer frame is received for a session. 
     |      :type sessionid: unsigned long
     |  
     |  __init__(...)
     |      __init__(self: pydnp3.asiodnp3.DefaultListenCallbacks) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class DefaultMasterApplication(pydnp3.opendnp3.IMasterApplication)
     |  Method resolution order:
     |      DefaultMasterApplication
     |      pydnp3.opendnp3.IMasterApplication
     |      pydnp3.opendnp3.ILinkListener
     |      pydnp3.openpal.IUTCTimeSource
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  AssignClassDuringStartup(...)
     |      AssignClassDuringStartup(self: pydnp3.asiodnp3.DefaultMasterApplication) -> bool
     |  
     |  ConfigureAssignClassRequest(...)
     |      ConfigureAssignClassRequest(self: pydnp3.asiodnp3.DefaultMasterApplication, fun: Callable[[pydnp3.opendnp3.Header], None]) -> None
     |      
     |      Configure the request headers for assign class. 
     |      Only called if AssignClassDuringStartup returns true. 
     |      The user only needs to call the function for each header type to be written.
     |  
     |  Now(...)
     |      Now(self: pydnp3.asiodnp3.DefaultMasterApplication) -> pydnp3.openpal.UTCTimestamp
     |      
     |      :return: a UTCTimestamp of the current time
     |  
     |  OnReceiveIIN(...)
     |      OnReceiveIIN(self: pydnp3.asiodnp3.DefaultMasterApplication, iin: pydnp3.opendnp3.IINField) -> None
     |      
     |      Called when a response or unsolicited response is receive from the outstation.
     |  
     |  OnStateChange(...)
     |      OnStateChange(self: pydnp3.asiodnp3.DefaultMasterApplication, value: pydnp3.opendnp3.LinkStatus) -> None
     |      
     |      Called when a the reset/unreset status of the link layer changes.
     |  
     |  OnTaskComplete(...)
     |      OnTaskComplete(self: pydnp3.asiodnp3.DefaultMasterApplication, info: pydnp3.opendnp3.TaskInfo) -> None
     |      
     |      Task completion notification.
     |  
     |  OnTaskStart(...)
     |      OnTaskStart(self: pydnp3.asiodnp3.DefaultMasterApplication, type: pydnp3.opendnp3.MasterTaskType, id: pydnp3.opendnp3.TaskId) -> None
     |      
     |      Task start notification.
     |  
     |  __init__(...)
     |      __init__(self: pydnp3.asiodnp3.DefaultMasterApplication) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  Create(...) from builtins.PyCapsule
     |      Create() -> pydnp3.opendnp3.IMasterApplication
     |      
     |      :return: shared_ptr to opendnp3.IMasterApplication
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pydnp3.opendnp3.IMasterApplication:
     |  
     |  OnClose(...)
     |      OnClose(self: pydnp3.opendnp3.IMasterApplication) -> None
     |      
     |      Called when the application layer is closed.
     |  
     |  OnOpen(...)
     |      OnOpen(self: pydnp3.opendnp3.IMasterApplication) -> None
     |      
     |      Called when the application layer is opened.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pydnp3.opendnp3.ILinkListener:
     |  
     |  OnKeepAliveFailure(...)
     |      OnKeepAliveFailure(self: pydnp3.opendnp3.ILinkListener) -> None
     |      
     |      Called when a keep alive message (request link status) receives no response.
     |  
     |  OnKeepAliveInitiated(...)
     |      OnKeepAliveInitiated(self: pydnp3.opendnp3.ILinkListener) -> None
     |      
     |      Called when the keep alive timer elapses. This doesn't denote a keep-alive failure, it's just a notification.
     |  
     |  OnKeepAliveSuccess(...)
     |      OnKeepAliveSuccess(self: pydnp3.opendnp3.ILinkListener) -> None
     |      
     |      Called when a keep alive message receives a valid response.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class Error(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      Error
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __eq__(...)
     |      __eq__(self: pydnp3.asiodnp3.Error, arg0: pydnp3.asiodnp3.Error) -> bool
     |  
     |  __getstate__(...)
     |      __getstate__(self: pydnp3.asiodnp3.Error) -> tuple
     |  
     |  __hash__(...)
     |      __hash__(self: pydnp3.asiodnp3.Error) -> int
     |  
     |  __init__(...)
     |      __init__(self: pydnp3.asiodnp3.Error, arg0: int) -> None
     |  
     |  __int__(...)
     |      __int__(self: pydnp3.asiodnp3.Error) -> int
     |  
     |  __ne__(...)
     |      __ne__(self: pydnp3.asiodnp3.Error, arg0: pydnp3.asiodnp3.Error) -> bool
     |  
     |  __repr__(...)
     |      __repr__(self: pydnp3.asiodnp3.Error) -> str
     |  
     |  __setstate__(...)
     |      __setstate__(self: pydnp3.asiodnp3.Error, arg0: tuple) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  __members__
     |  
     |  ----------------------------------------------------------------------
     |  Data and other attributes defined here:
     |  
     |  NO_SERIAL_SUPPORT = Error.NO_SERIAL_SUPPORT
     |  
     |  NO_TLS_SUPPORT = Error.NO_TLS_SUPPORT
     |  
     |  SHUTTING_DOWN = Error.SHUTTING_DOWN
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class ErrorCategory(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      ErrorCategory
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  message(...)
     |      message(self: pydnp3.asiodnp3.ErrorCategory, ev: int) -> str
     |  
     |  name(...)
     |      name(self: pydnp3.asiodnp3.ErrorCategory) -> str
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  Instance(...) from builtins.PyCapsule
     |      Instance() -> std::_V2::error_category
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class IChannel(pydnp3.asiopal.IResource)
     |  Represents a communication channel upon which masters and outstations can be bound.
     |  
     |  Method resolution order:
     |      IChannel
     |      pydnp3.asiopal.IResource
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  AddMaster(...)
     |      AddMaster(self: pydnp3.asiodnp3.IChannel, id: str, SOEHandler: pydnp3.opendnp3.ISOEHandler, application: pydnp3.opendnp3.IMasterApplication, config: pydnp3.asiodnp3.MasterStackConfig) -> pydnp3.asiodnp3.IMaster
     |      
     |         Add a master to the channel. 
     |      :param id: An ID that gets used for logging. 
     |      :param SOEHandler: Callback object for all received measurements 
     |      :param application: The master application bound to the master session 
     |      :param config: Configuration object that controls how the master behaves 
     |      :return: shared_ptr to the running master
     |  
     |  AddOutstation(...)
     |      AddOutstation(self: pydnp3.asiodnp3.IChannel, id: str, commandHandler: pydnp3.opendnp3.ICommandHandler, application: pydnp3.opendnp3.IOutstationApplication, config: pydnp3.asiodnp3.OutstationStackConfig) -> pydnp3.asiodnp3.IOutstation
     |      
     |         Add an outstation to the channel. 
     |      :param id: An ID that gets used for logging 
     |      :param commandHandler: Callback object for handling command requests 
     |      :param application: Callback object for user code 
     |      :param config: Configuration object that controls how the outstation behaves 
     |      :return: shared_ptr to the running outstation
     |  
     |  GetLogFilters(...)
     |      GetLogFilters(self: pydnp3.asiodnp3.IChannel) -> pydnp3.openpal.LogFilters
     |      
     |      :return: the current logger settings for this channel
     |  
     |  GetStatistics(...)
     |      GetStatistics(self: pydnp3.asiodnp3.IChannel) -> pydnp3.opendnp3.LinkStatistics
     |      
     |      Synchronously read the channel statistics.
     |  
     |  SetLogFilters(...)
     |      SetLogFilters(self: pydnp3.asiodnp3.IChannel, filters: pydnp3.openpal.LogFilters) -> None
     |      
     |      :param filters: adjust the filters to this value
     |  
     |  __init__(...)
     |      __init__(self: pydnp3.asiodnp3.IChannel) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pydnp3.asiopal.IResource:
     |  
     |  Shutdown(...)
     |      Shutdown(self: pydnp3.asiopal.IResource) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class IChannelListener(pybind11_builtins.pybind11_object)
     |  Callback interface for receiving information about a running channel.
     |  
     |  Method resolution order:
     |      IChannelListener
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  OnStateChange(...)
     |      OnStateChange(self: pydnp3.asiodnp3.IChannelListener, state: pydnp3.opendnp3.ChannelState) -> None
     |      
     |      Receive callbacks for state transitions on the channels executor.
     |  
     |  __init__(...)
     |      __init__(self: pydnp3.asiodnp3.IChannelListener) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class IListenCallbacks(pybind11_builtins.pybind11_object)
     |  Callback interface invoked when a new connection is accepted.
     |  
     |  Method resolution order:
     |      IListenCallbacks
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  AcceptCertificate(...)
     |      AcceptCertificate(self: pydnp3.asiodnp3.IListenCallbacks, sessionid: int, info: pydnp3.asiodnp3.X509Info) -> bool
     |      
     |         Ask user code if the following preverified certificate should be accepted. 
     |         If true, the certificate should be accepted, false otherwise. 
     |      :param sessionid: Incrementing id used to uniquely identify the session 
     |      :param info: Information from the x509 certificate 
     |      :type sessionid: unsigned long
     |  
     |  AcceptConnection(...)
     |      AcceptConnection(self: pydnp3.asiodnp3.IListenCallbacks, sessionid: int, ipaddress: str) -> bool
     |      
     |         Ask user code if the following connection should be accepted. 
     |         If true, the connection is accepted and a link frame parser is created to handle incoming frame data. 
     |      :param sessionid: Incrementing id used to uniquely identify the session 
     |      :param ipaddress: The IP address of the connecting host. Can optionally be used for connection filtering 
     |      :type sessionid: unsigned long
     |  
     |  GetFirstFrameTimeout(...)
     |      GetFirstFrameTimeout(self: pydnp3.asiodnp3.IListenCallbacks) -> pydnp3.openpal.TimeDuration
     |      
     |      :return: the amount of time the session should wait for the first frame.
     |  
     |  OnCertificateError(...)
     |      OnCertificateError(self: pydnp3.asiodnp3.IListenCallbacks, sessionid: int, info: pydnp3.asiodnp3.X509Info, error: int) -> None
     |      
     |         Called when a certificate fails verification. 
     |      :param sessionid: Incrementing id used to uniquely identify the session 
     |      :param info: Information from the x509 certificate 
     |      :param error: Error code with reason for failed verification 
     |      :type sessionid: unsigned long
     |  
     |  OnConnectionClose(...)
     |      OnConnectionClose(self: pydnp3.asiodnp3.IListenCallbacks, sessionid: int, session: pydnp3.asiodnp3.IMasterSession) -> None
     |      
     |         Called when a socket closes. 
     |      :param sessionid: Incrementing id used to uniquely identify the session 
     |      :param session: Possibly NULL shared_ptr to the master session if it was created 
     |      :type sessionid: unsigned long
     |  
     |  OnFirstFrame(...)
     |      OnFirstFrame(self: pydnp3.asiodnp3.IListenCallbacks, sessionid: int, header: pydnp3.opendnp3.LinkHeaderFields, acceptor: pydnp3.asiodnp3.ISessionAcceptor) -> None
     |      
     |         Called when the first link-layer frame is received for a session. 
     |      :type sessionid: unsigned long
     |  
     |  __init__(...)
     |      __init__(self: pydnp3.asiodnp3.IListenCallbacks) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class IMaster(IMasterOperations, IStack)
     |  Interface that represents a running master session.
     |  
     |  Method resolution order:
     |      IMaster
     |      IMasterOperations
     |      pydnp3.opendnp3.ICommandProcessor
     |      IStack
     |      pydnp3.asiopal.IResource
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__(self: pydnp3.asiodnp3.IMaster) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from IMasterOperations:
     |  
     |  AddAllObjectsScan(...)
     |      AddAllObjectsScan(self: pydnp3.asiodnp3.IMasterOperations, gvId: pydnp3.opendnp3.GroupVariationID, period: pydnp3.openpal.TimeDuration, config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f980918aab0>) -> pydnp3.asiodnp3.IMasterScan
     |      
     |         Add a scan that requests all objects using qualifier code 0x06. 
     |      :param config: defaults to opendnp3.TaskConfig.Default() 
     |      :return: shared_ptr to asiodnp3.IMasterScan - a proxy class used to manipulate the scan
     |  
     |  AddClassScan(...)
     |      AddClassScan(self: pydnp3.asiodnp3.IMasterOperations, field: pydnp3.opendnp3.ClassField, period: pydnp3.openpal.TimeDuration, config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f98091cb8f0>) -> pydnp3.asiodnp3.IMasterScan
     |      
     |         Add a class-based scan to the master. 
     |      :param config: defaults to opendnp3.TaskConfig.Default() 
     |      :return: shared_ptr to asiodnp3.IMasterScan - a proxy class used to manipulate the scan
     |  
     |  AddRangeScan(...)
     |      AddRangeScan(self: pydnp3.asiodnp3.IMasterOperations, gvId: pydnp3.opendnp3.GroupVariationID, start: int, stop: int, period: pydnp3.openpal.TimeDuration, config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f98091aa570>) -> pydnp3.asiodnp3.IMasterScan
     |      
     |         Add a start/stop (range) scan to the master. 
     |      :param config: defaults to opendnp3.TaskConfig.Default() 
     |      :return: shared_ptr to asiodnp3.IMasterScan - a proxy class used to manipulate the scan.
     |  
     |  AddScan(...)
     |      AddScan(self: pydnp3.asiodnp3.IMasterOperations, period: pydnp3.openpal.TimeDuration, headers: List[pydnp3.opendnp3.Header], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f98091cb5f0>) -> pydnp3.asiodnp3.IMasterScan
     |      
     |         Add a recurring user-defined scan from a vector of headers. 
     |      :param config: defaults to opendnp3.TaskConfig.Default() 
     |      :return: shared_ptr to asiodnp3.IMasterScan - a proxy class used to manipulate the scan
     |  
     |  PerformFunction(...)
     |      PerformFunction(self: pydnp3.asiodnp3.IMasterOperations, name: str, func: pydnp3.opendnp3.FunctionCode, headers: List[pydnp3.opendnp3.Header], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f98091bb470>) -> None
     |      
     |         Perform any operation that requires just a function code 
     |      :param config: defaults to opendnp3.TaskConfig.Default()
     |  
     |  Restart(...)
     |      Restart(self: pydnp3.asiodnp3.IMasterOperations, op: pydnp3.opendnp3.RestartType, callback: Callable[[pydnp3.opendnp3.RestartOperationResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809b17b70>) -> None
     |      
     |         Perform a cold or warm restart and get back the time-to-complete value 
     |      :param config: defaults to opendnp3.TaskConfig.Default()
     |  
     |  Scan(...)
     |      Scan(self: pydnp3.asiodnp3.IMasterOperations, headers: List[pydnp3.opendnp3.Header], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809ae5b70>) -> None
     |      
     |         Initiate a single user defined scan via a vector of headers. 
     |      :param config: defaults to opendnp3.TaskConfig.Default()
     |  
     |  ScanAllObjects(...)
     |      ScanAllObjects(self: pydnp3.asiodnp3.IMasterOperations, gvId: pydnp3.opendnp3.GroupVariationID, config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809af43f0>) -> None
     |      
     |         Initiate a single scan that requests all objects (0x06 qualifier code) for a certain group and variation. 
     |      :param config: defaults to opendnp3.TaskConfig.Default()
     |  
     |  ScanClasses(...)
     |      ScanClasses(self: pydnp3.asiodnp3.IMasterOperations, field: pydnp3.opendnp3.ClassField, config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809ad3730>) -> None
     |      
     |         Initiate a single class-based scan. 
     |      :param config: defaults to opendnp3.TaskConfig.Default()
     |  
     |  ScanRange(...)
     |      ScanRange(self: pydnp3.asiodnp3.IMasterOperations, gvId: pydnp3.opendnp3.GroupVariationID, start: int, stop: int, config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f98091b8130>) -> None
     |      
     |         Initiate a single start/stop (range) scan 
     |      :param config: defaults to opendnp3.TaskConfig.Default()
     |  
     |  SetLogFilters(...)
     |      SetLogFilters(self: pydnp3.asiodnp3.IMasterOperations, filters: pydnp3.openpal.LogFilters) -> None
     |      
     |      :param filters: Adjust the filters to this value
     |  
     |  Write(...)
     |      Write(self: pydnp3.asiodnp3.IMasterOperations, value: pydnp3.opendnp3.TimeAndInterval, index: int, config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809b33370>) -> None
     |      
     |         Write a time and interval object to a specific index 
     |      :param config: defaults to opendnp3.TaskConfig.Default()
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pydnp3.opendnp3.ICommandProcessor:
     |  
     |  DirectOperate(...)
     |      DirectOperate(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. DirectOperate(self: pydnp3.opendnp3.ICommandProcessor, command: pydnp3.opendnp3.ControlRelayOutputBlock, index: int, callback: Callable[[pydnp3.opendnp3.ICommandTaskResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f980918b0b0>) -> None
     |      
     |      2. DirectOperate(self: pydnp3.opendnp3.ICommandProcessor, command: pydnp3.opendnp3.AnalogOutputInt16, index: int, callback: Callable[[pydnp3.opendnp3.ICommandTaskResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809b181f0>) -> None
     |      
     |      3. DirectOperate(self: pydnp3.opendnp3.ICommandProcessor, command: pydnp3.opendnp3.AnalogOutputInt32, index: int, callback: Callable[[pydnp3.opendnp3.ICommandTaskResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f980918b370>) -> None
     |      
     |      4. DirectOperate(self: pydnp3.opendnp3.ICommandProcessor, command: pydnp3.opendnp3.AnalogOutputFloat32, index: int, callback: Callable[[pydnp3.opendnp3.ICommandTaskResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809ac9eb0>) -> None
     |      
     |      5. DirectOperate(self: pydnp3.opendnp3.ICommandProcessor, command: pydnp3.opendnp3.AnalogOutputDouble64, index: int, callback: Callable[[pydnp3.opendnp3.ICommandTaskResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809b270f0>) -> None
     |      
     |         Direct operate a single command. 
     |      :param command: Command to operate 
     |      :param index: in dex of the command 
     |      :param callback: callback that will be invoked upon completion or failure 
     |      :param config: optional configuration that controls normal callbacks and allows the user to be specified for SA
     |      
     |      6. DirectOperate(self: pydnp3.opendnp3.ICommandProcessor, commands: pydnp3.opendnp3.CommandSet, callback: Callable[[pydnp3.opendnp3.ICommandTaskResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809ae3470>) -> None
     |      
     |         Direct operate a set of commands. 
     |      :param commands: Set of command headers 
     |      :param callback: callback that will be invoked upon completion or failure 
     |      :param config: optional configuration that controls normal callbacks and allows the user to be specified for SA
     |  
     |  SelectAndOperate(...)
     |      SelectAndOperate(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. SelectAndOperate(self: pydnp3.opendnp3.ICommandProcessor, command: pydnp3.opendnp3.ControlRelayOutputBlock, index: int, callback: Callable[[pydnp3.opendnp3.ICommandTaskResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809ad0730>) -> None
     |      
     |      2. SelectAndOperate(self: pydnp3.opendnp3.ICommandProcessor, command: pydnp3.opendnp3.AnalogOutputInt16, index: int, callback: Callable[[pydnp3.opendnp3.ICommandTaskResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809ae2f70>) -> None
     |      
     |      3. SelectAndOperate(self: pydnp3.opendnp3.ICommandProcessor, command: pydnp3.opendnp3.AnalogOutputInt32, index: int, callback: Callable[[pydnp3.opendnp3.ICommandTaskResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809b17330>) -> None
     |      
     |      4. SelectAndOperate(self: pydnp3.opendnp3.ICommandProcessor, command: pydnp3.opendnp3.AnalogOutputFloat32, index: int, callback: Callable[[pydnp3.opendnp3.ICommandTaskResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809acadb0>) -> None
     |      
     |      5. SelectAndOperate(self: pydnp3.opendnp3.ICommandProcessor, command: pydnp3.opendnp3.AnalogOutputDouble64, index: int, callback: Callable[[pydnp3.opendnp3.ICommandTaskResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809acab30>) -> None
     |      
     |         Select and operate a single command. 
     |      :param command: Command to operate 
     |      :param index: in dex of the command 
     |      :param callback: callback that will be invoked upon completion or failure 
     |      :param config: optional configuration that controls normal callbacks and allows the user to be specified for SA
     |      
     |      6. SelectAndOperate(self: pydnp3.opendnp3.ICommandProcessor, commands: pydnp3.opendnp3.CommandSet, callback: Callable[[pydnp3.opendnp3.ICommandTaskResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f980917d2f0>) -> None
     |      
     |         Select and operate a set of commands. 
     |      :param commands: Set of command headers 
     |      :param callback: callback that will be invoked upon completion or failure 
     |      :param config: optional configuration that controls normal callbacks and allows the user to be specified for SA
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from IStack:
     |  
     |  Disable(...)
     |      Disable(self: pydnp3.asiodnp3.IStack) -> bool
     |      
     |      Synchronously disable communications.
     |  
     |  Enable(...)
     |      Enable(self: pydnp3.asiodnp3.IStack) -> bool
     |      
     |      Synchronously enable communications.
     |  
     |  GetStackStatistics(...)
     |      GetStackStatistics(self: pydnp3.asiodnp3.IStack) -> pydnp3.opendnp3.StackStatistics
     |      
     |      :return: stack statistics counters.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pydnp3.asiopal.IResource:
     |  
     |  Shutdown(...)
     |      Shutdown(self: pydnp3.asiopal.IResource) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class IMasterOperations(pydnp3.opendnp3.ICommandProcessor)
     |  All the operations that the user can perform on a running master.
     |  
     |  Method resolution order:
     |      IMasterOperations
     |      pydnp3.opendnp3.ICommandProcessor
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  AddAllObjectsScan(...)
     |      AddAllObjectsScan(self: pydnp3.asiodnp3.IMasterOperations, gvId: pydnp3.opendnp3.GroupVariationID, period: pydnp3.openpal.TimeDuration, config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f980918aab0>) -> pydnp3.asiodnp3.IMasterScan
     |      
     |         Add a scan that requests all objects using qualifier code 0x06. 
     |      :param config: defaults to opendnp3.TaskConfig.Default() 
     |      :return: shared_ptr to asiodnp3.IMasterScan - a proxy class used to manipulate the scan
     |  
     |  AddClassScan(...)
     |      AddClassScan(self: pydnp3.asiodnp3.IMasterOperations, field: pydnp3.opendnp3.ClassField, period: pydnp3.openpal.TimeDuration, config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f98091cb8f0>) -> pydnp3.asiodnp3.IMasterScan
     |      
     |         Add a class-based scan to the master. 
     |      :param config: defaults to opendnp3.TaskConfig.Default() 
     |      :return: shared_ptr to asiodnp3.IMasterScan - a proxy class used to manipulate the scan
     |  
     |  AddRangeScan(...)
     |      AddRangeScan(self: pydnp3.asiodnp3.IMasterOperations, gvId: pydnp3.opendnp3.GroupVariationID, start: int, stop: int, period: pydnp3.openpal.TimeDuration, config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f98091aa570>) -> pydnp3.asiodnp3.IMasterScan
     |      
     |         Add a start/stop (range) scan to the master. 
     |      :param config: defaults to opendnp3.TaskConfig.Default() 
     |      :return: shared_ptr to asiodnp3.IMasterScan - a proxy class used to manipulate the scan.
     |  
     |  AddScan(...)
     |      AddScan(self: pydnp3.asiodnp3.IMasterOperations, period: pydnp3.openpal.TimeDuration, headers: List[pydnp3.opendnp3.Header], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f98091cb5f0>) -> pydnp3.asiodnp3.IMasterScan
     |      
     |         Add a recurring user-defined scan from a vector of headers. 
     |      :param config: defaults to opendnp3.TaskConfig.Default() 
     |      :return: shared_ptr to asiodnp3.IMasterScan - a proxy class used to manipulate the scan
     |  
     |  PerformFunction(...)
     |      PerformFunction(self: pydnp3.asiodnp3.IMasterOperations, name: str, func: pydnp3.opendnp3.FunctionCode, headers: List[pydnp3.opendnp3.Header], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f98091bb470>) -> None
     |      
     |         Perform any operation that requires just a function code 
     |      :param config: defaults to opendnp3.TaskConfig.Default()
     |  
     |  Restart(...)
     |      Restart(self: pydnp3.asiodnp3.IMasterOperations, op: pydnp3.opendnp3.RestartType, callback: Callable[[pydnp3.opendnp3.RestartOperationResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809b17b70>) -> None
     |      
     |         Perform a cold or warm restart and get back the time-to-complete value 
     |      :param config: defaults to opendnp3.TaskConfig.Default()
     |  
     |  Scan(...)
     |      Scan(self: pydnp3.asiodnp3.IMasterOperations, headers: List[pydnp3.opendnp3.Header], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809ae5b70>) -> None
     |      
     |         Initiate a single user defined scan via a vector of headers. 
     |      :param config: defaults to opendnp3.TaskConfig.Default()
     |  
     |  ScanAllObjects(...)
     |      ScanAllObjects(self: pydnp3.asiodnp3.IMasterOperations, gvId: pydnp3.opendnp3.GroupVariationID, config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809af43f0>) -> None
     |      
     |         Initiate a single scan that requests all objects (0x06 qualifier code) for a certain group and variation. 
     |      :param config: defaults to opendnp3.TaskConfig.Default()
     |  
     |  ScanClasses(...)
     |      ScanClasses(self: pydnp3.asiodnp3.IMasterOperations, field: pydnp3.opendnp3.ClassField, config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809ad3730>) -> None
     |      
     |         Initiate a single class-based scan. 
     |      :param config: defaults to opendnp3.TaskConfig.Default()
     |  
     |  ScanRange(...)
     |      ScanRange(self: pydnp3.asiodnp3.IMasterOperations, gvId: pydnp3.opendnp3.GroupVariationID, start: int, stop: int, config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f98091b8130>) -> None
     |      
     |         Initiate a single start/stop (range) scan 
     |      :param config: defaults to opendnp3.TaskConfig.Default()
     |  
     |  SetLogFilters(...)
     |      SetLogFilters(self: pydnp3.asiodnp3.IMasterOperations, filters: pydnp3.openpal.LogFilters) -> None
     |      
     |      :param filters: Adjust the filters to this value
     |  
     |  Write(...)
     |      Write(self: pydnp3.asiodnp3.IMasterOperations, value: pydnp3.opendnp3.TimeAndInterval, index: int, config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809b33370>) -> None
     |      
     |         Write a time and interval object to a specific index 
     |      :param config: defaults to opendnp3.TaskConfig.Default()
     |  
     |  __init__(...)
     |      __init__(self: pydnp3.asiodnp3.IMasterOperations) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pydnp3.opendnp3.ICommandProcessor:
     |  
     |  DirectOperate(...)
     |      DirectOperate(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. DirectOperate(self: pydnp3.opendnp3.ICommandProcessor, command: pydnp3.opendnp3.ControlRelayOutputBlock, index: int, callback: Callable[[pydnp3.opendnp3.ICommandTaskResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f980918b0b0>) -> None
     |      
     |      2. DirectOperate(self: pydnp3.opendnp3.ICommandProcessor, command: pydnp3.opendnp3.AnalogOutputInt16, index: int, callback: Callable[[pydnp3.opendnp3.ICommandTaskResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809b181f0>) -> None
     |      
     |      3. DirectOperate(self: pydnp3.opendnp3.ICommandProcessor, command: pydnp3.opendnp3.AnalogOutputInt32, index: int, callback: Callable[[pydnp3.opendnp3.ICommandTaskResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f980918b370>) -> None
     |      
     |      4. DirectOperate(self: pydnp3.opendnp3.ICommandProcessor, command: pydnp3.opendnp3.AnalogOutputFloat32, index: int, callback: Callable[[pydnp3.opendnp3.ICommandTaskResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809ac9eb0>) -> None
     |      
     |      5. DirectOperate(self: pydnp3.opendnp3.ICommandProcessor, command: pydnp3.opendnp3.AnalogOutputDouble64, index: int, callback: Callable[[pydnp3.opendnp3.ICommandTaskResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809b270f0>) -> None
     |      
     |         Direct operate a single command. 
     |      :param command: Command to operate 
     |      :param index: in dex of the command 
     |      :param callback: callback that will be invoked upon completion or failure 
     |      :param config: optional configuration that controls normal callbacks and allows the user to be specified for SA
     |      
     |      6. DirectOperate(self: pydnp3.opendnp3.ICommandProcessor, commands: pydnp3.opendnp3.CommandSet, callback: Callable[[pydnp3.opendnp3.ICommandTaskResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809ae3470>) -> None
     |      
     |         Direct operate a set of commands. 
     |      :param commands: Set of command headers 
     |      :param callback: callback that will be invoked upon completion or failure 
     |      :param config: optional configuration that controls normal callbacks and allows the user to be specified for SA
     |  
     |  SelectAndOperate(...)
     |      SelectAndOperate(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. SelectAndOperate(self: pydnp3.opendnp3.ICommandProcessor, command: pydnp3.opendnp3.ControlRelayOutputBlock, index: int, callback: Callable[[pydnp3.opendnp3.ICommandTaskResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809ad0730>) -> None
     |      
     |      2. SelectAndOperate(self: pydnp3.opendnp3.ICommandProcessor, command: pydnp3.opendnp3.AnalogOutputInt16, index: int, callback: Callable[[pydnp3.opendnp3.ICommandTaskResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809ae2f70>) -> None
     |      
     |      3. SelectAndOperate(self: pydnp3.opendnp3.ICommandProcessor, command: pydnp3.opendnp3.AnalogOutputInt32, index: int, callback: Callable[[pydnp3.opendnp3.ICommandTaskResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809b17330>) -> None
     |      
     |      4. SelectAndOperate(self: pydnp3.opendnp3.ICommandProcessor, command: pydnp3.opendnp3.AnalogOutputFloat32, index: int, callback: Callable[[pydnp3.opendnp3.ICommandTaskResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809acadb0>) -> None
     |      
     |      5. SelectAndOperate(self: pydnp3.opendnp3.ICommandProcessor, command: pydnp3.opendnp3.AnalogOutputDouble64, index: int, callback: Callable[[pydnp3.opendnp3.ICommandTaskResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809acab30>) -> None
     |      
     |         Select and operate a single command. 
     |      :param command: Command to operate 
     |      :param index: in dex of the command 
     |      :param callback: callback that will be invoked upon completion or failure 
     |      :param config: optional configuration that controls normal callbacks and allows the user to be specified for SA
     |      
     |      6. SelectAndOperate(self: pydnp3.opendnp3.ICommandProcessor, commands: pydnp3.opendnp3.CommandSet, callback: Callable[[pydnp3.opendnp3.ICommandTaskResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f980917d2f0>) -> None
     |      
     |         Select and operate a set of commands. 
     |      :param commands: Set of command headers 
     |      :param callback: callback that will be invoked upon completion or failure 
     |      :param config: optional configuration that controls normal callbacks and allows the user to be specified for SA
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class IMasterScan(pybind11_builtins.pybind11_object)
     |  Interface for interacting with a permanently bound scan.
     |  
     |  Method resolution order:
     |      IMasterScan
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  Demand(...)
     |      Demand(self: pydnp3.asiodnp3.IMasterScan) -> None
     |      
     |      Request that the scan be performed as soon as possible.
     |  
     |  __init__(...)
     |      __init__(self: pydnp3.asiodnp3.IMasterScan) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class IMasterSession(IMasterOperations)
     |  Interface that represents an emphemeral master session.
     |  
     |  Method resolution order:
     |      IMasterSession
     |      IMasterOperations
     |      pydnp3.opendnp3.ICommandProcessor
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  BeginShutdown(...)
     |      BeginShutdown(self: pydnp3.asiodnp3.IMasterSession) -> None
     |  
     |  GetStackStatistics(...)
     |      GetStackStatistics(self: pydnp3.asiodnp3.IMasterSession) -> pydnp3.opendnp3.StackStatistics
     |  
     |  __init__(...)
     |      __init__(self: pydnp3.asiodnp3.IMasterSession) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from IMasterOperations:
     |  
     |  AddAllObjectsScan(...)
     |      AddAllObjectsScan(self: pydnp3.asiodnp3.IMasterOperations, gvId: pydnp3.opendnp3.GroupVariationID, period: pydnp3.openpal.TimeDuration, config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f980918aab0>) -> pydnp3.asiodnp3.IMasterScan
     |      
     |         Add a scan that requests all objects using qualifier code 0x06. 
     |      :param config: defaults to opendnp3.TaskConfig.Default() 
     |      :return: shared_ptr to asiodnp3.IMasterScan - a proxy class used to manipulate the scan
     |  
     |  AddClassScan(...)
     |      AddClassScan(self: pydnp3.asiodnp3.IMasterOperations, field: pydnp3.opendnp3.ClassField, period: pydnp3.openpal.TimeDuration, config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f98091cb8f0>) -> pydnp3.asiodnp3.IMasterScan
     |      
     |         Add a class-based scan to the master. 
     |      :param config: defaults to opendnp3.TaskConfig.Default() 
     |      :return: shared_ptr to asiodnp3.IMasterScan - a proxy class used to manipulate the scan
     |  
     |  AddRangeScan(...)
     |      AddRangeScan(self: pydnp3.asiodnp3.IMasterOperations, gvId: pydnp3.opendnp3.GroupVariationID, start: int, stop: int, period: pydnp3.openpal.TimeDuration, config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f98091aa570>) -> pydnp3.asiodnp3.IMasterScan
     |      
     |         Add a start/stop (range) scan to the master. 
     |      :param config: defaults to opendnp3.TaskConfig.Default() 
     |      :return: shared_ptr to asiodnp3.IMasterScan - a proxy class used to manipulate the scan.
     |  
     |  AddScan(...)
     |      AddScan(self: pydnp3.asiodnp3.IMasterOperations, period: pydnp3.openpal.TimeDuration, headers: List[pydnp3.opendnp3.Header], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f98091cb5f0>) -> pydnp3.asiodnp3.IMasterScan
     |      
     |         Add a recurring user-defined scan from a vector of headers. 
     |      :param config: defaults to opendnp3.TaskConfig.Default() 
     |      :return: shared_ptr to asiodnp3.IMasterScan - a proxy class used to manipulate the scan
     |  
     |  PerformFunction(...)
     |      PerformFunction(self: pydnp3.asiodnp3.IMasterOperations, name: str, func: pydnp3.opendnp3.FunctionCode, headers: List[pydnp3.opendnp3.Header], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f98091bb470>) -> None
     |      
     |         Perform any operation that requires just a function code 
     |      :param config: defaults to opendnp3.TaskConfig.Default()
     |  
     |  Restart(...)
     |      Restart(self: pydnp3.asiodnp3.IMasterOperations, op: pydnp3.opendnp3.RestartType, callback: Callable[[pydnp3.opendnp3.RestartOperationResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809b17b70>) -> None
     |      
     |         Perform a cold or warm restart and get back the time-to-complete value 
     |      :param config: defaults to opendnp3.TaskConfig.Default()
     |  
     |  Scan(...)
     |      Scan(self: pydnp3.asiodnp3.IMasterOperations, headers: List[pydnp3.opendnp3.Header], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809ae5b70>) -> None
     |      
     |         Initiate a single user defined scan via a vector of headers. 
     |      :param config: defaults to opendnp3.TaskConfig.Default()
     |  
     |  ScanAllObjects(...)
     |      ScanAllObjects(self: pydnp3.asiodnp3.IMasterOperations, gvId: pydnp3.opendnp3.GroupVariationID, config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809af43f0>) -> None
     |      
     |         Initiate a single scan that requests all objects (0x06 qualifier code) for a certain group and variation. 
     |      :param config: defaults to opendnp3.TaskConfig.Default()
     |  
     |  ScanClasses(...)
     |      ScanClasses(self: pydnp3.asiodnp3.IMasterOperations, field: pydnp3.opendnp3.ClassField, config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809ad3730>) -> None
     |      
     |         Initiate a single class-based scan. 
     |      :param config: defaults to opendnp3.TaskConfig.Default()
     |  
     |  ScanRange(...)
     |      ScanRange(self: pydnp3.asiodnp3.IMasterOperations, gvId: pydnp3.opendnp3.GroupVariationID, start: int, stop: int, config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f98091b8130>) -> None
     |      
     |         Initiate a single start/stop (range) scan 
     |      :param config: defaults to opendnp3.TaskConfig.Default()
     |  
     |  SetLogFilters(...)
     |      SetLogFilters(self: pydnp3.asiodnp3.IMasterOperations, filters: pydnp3.openpal.LogFilters) -> None
     |      
     |      :param filters: Adjust the filters to this value
     |  
     |  Write(...)
     |      Write(self: pydnp3.asiodnp3.IMasterOperations, value: pydnp3.opendnp3.TimeAndInterval, index: int, config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809b33370>) -> None
     |      
     |         Write a time and interval object to a specific index 
     |      :param config: defaults to opendnp3.TaskConfig.Default()
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pydnp3.opendnp3.ICommandProcessor:
     |  
     |  DirectOperate(...)
     |      DirectOperate(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. DirectOperate(self: pydnp3.opendnp3.ICommandProcessor, command: pydnp3.opendnp3.ControlRelayOutputBlock, index: int, callback: Callable[[pydnp3.opendnp3.ICommandTaskResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f980918b0b0>) -> None
     |      
     |      2. DirectOperate(self: pydnp3.opendnp3.ICommandProcessor, command: pydnp3.opendnp3.AnalogOutputInt16, index: int, callback: Callable[[pydnp3.opendnp3.ICommandTaskResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809b181f0>) -> None
     |      
     |      3. DirectOperate(self: pydnp3.opendnp3.ICommandProcessor, command: pydnp3.opendnp3.AnalogOutputInt32, index: int, callback: Callable[[pydnp3.opendnp3.ICommandTaskResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f980918b370>) -> None
     |      
     |      4. DirectOperate(self: pydnp3.opendnp3.ICommandProcessor, command: pydnp3.opendnp3.AnalogOutputFloat32, index: int, callback: Callable[[pydnp3.opendnp3.ICommandTaskResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809ac9eb0>) -> None
     |      
     |      5. DirectOperate(self: pydnp3.opendnp3.ICommandProcessor, command: pydnp3.opendnp3.AnalogOutputDouble64, index: int, callback: Callable[[pydnp3.opendnp3.ICommandTaskResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809b270f0>) -> None
     |      
     |         Direct operate a single command. 
     |      :param command: Command to operate 
     |      :param index: in dex of the command 
     |      :param callback: callback that will be invoked upon completion or failure 
     |      :param config: optional configuration that controls normal callbacks and allows the user to be specified for SA
     |      
     |      6. DirectOperate(self: pydnp3.opendnp3.ICommandProcessor, commands: pydnp3.opendnp3.CommandSet, callback: Callable[[pydnp3.opendnp3.ICommandTaskResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809ae3470>) -> None
     |      
     |         Direct operate a set of commands. 
     |      :param commands: Set of command headers 
     |      :param callback: callback that will be invoked upon completion or failure 
     |      :param config: optional configuration that controls normal callbacks and allows the user to be specified for SA
     |  
     |  SelectAndOperate(...)
     |      SelectAndOperate(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. SelectAndOperate(self: pydnp3.opendnp3.ICommandProcessor, command: pydnp3.opendnp3.ControlRelayOutputBlock, index: int, callback: Callable[[pydnp3.opendnp3.ICommandTaskResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809ad0730>) -> None
     |      
     |      2. SelectAndOperate(self: pydnp3.opendnp3.ICommandProcessor, command: pydnp3.opendnp3.AnalogOutputInt16, index: int, callback: Callable[[pydnp3.opendnp3.ICommandTaskResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809ae2f70>) -> None
     |      
     |      3. SelectAndOperate(self: pydnp3.opendnp3.ICommandProcessor, command: pydnp3.opendnp3.AnalogOutputInt32, index: int, callback: Callable[[pydnp3.opendnp3.ICommandTaskResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809b17330>) -> None
     |      
     |      4. SelectAndOperate(self: pydnp3.opendnp3.ICommandProcessor, command: pydnp3.opendnp3.AnalogOutputFloat32, index: int, callback: Callable[[pydnp3.opendnp3.ICommandTaskResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809acadb0>) -> None
     |      
     |      5. SelectAndOperate(self: pydnp3.opendnp3.ICommandProcessor, command: pydnp3.opendnp3.AnalogOutputDouble64, index: int, callback: Callable[[pydnp3.opendnp3.ICommandTaskResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f9809acab30>) -> None
     |      
     |         Select and operate a single command. 
     |      :param command: Command to operate 
     |      :param index: in dex of the command 
     |      :param callback: callback that will be invoked upon completion or failure 
     |      :param config: optional configuration that controls normal callbacks and allows the user to be specified for SA
     |      
     |      6. SelectAndOperate(self: pydnp3.opendnp3.ICommandProcessor, commands: pydnp3.opendnp3.CommandSet, callback: Callable[[pydnp3.opendnp3.ICommandTaskResult], None], config: pydnp3.opendnp3.TaskConfig = <pydnp3.opendnp3.TaskConfig object at 0x7f980917d2f0>) -> None
     |      
     |         Select and operate a set of commands. 
     |      :param commands: Set of command headers 
     |      :param callback: callback that will be invoked upon completion or failure 
     |      :param config: optional configuration that controls normal callbacks and allows the user to be specified for SA
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class IOutstation(IStack)
     |  Interface representing a running outstation.
     |  
     |  Method resolution order:
     |      IOutstation
     |      IStack
     |      pydnp3.asiopal.IResource
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  Apply(...)
     |      Apply(self: pydnp3.asiodnp3.IOutstation, updates: pydnp3.asiodnp3.Updates) -> None
     |      
     |      Apply a set of measurement updates to the outstation.
     |  
     |  SetLogFilters(...)
     |      SetLogFilters(self: pydnp3.asiodnp3.IOutstation, filters: pydnp3.openpal.LogFilters) -> None
     |      
     |      :param filters: Adjust the filters to this value
     |  
     |  SetRestartIIN(...)
     |      SetRestartIIN(self: pydnp3.asiodnp3.IOutstation) -> None
     |      
     |      Sets the restart IIN bit. 
     |      Normally applications should not touch this bit, but it is provided for simulating restarts.
     |  
     |  __init__(...)
     |      __init__(self: pydnp3.asiodnp3.IOutstation) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from IStack:
     |  
     |  Disable(...)
     |      Disable(self: pydnp3.asiodnp3.IStack) -> bool
     |      
     |      Synchronously disable communications.
     |  
     |  Enable(...)
     |      Enable(self: pydnp3.asiodnp3.IStack) -> bool
     |      
     |      Synchronously enable communications.
     |  
     |  GetStackStatistics(...)
     |      GetStackStatistics(self: pydnp3.asiodnp3.IStack) -> pydnp3.opendnp3.StackStatistics
     |      
     |      :return: stack statistics counters.
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pydnp3.asiopal.IResource:
     |  
     |  Shutdown(...)
     |      Shutdown(self: pydnp3.asiopal.IResource) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class ISessionAcceptor(pybind11_builtins.pybind11_object)
     |  Callback interface invoked when a new connection is accepted
     |  
     |  Method resolution order:
     |      ISessionAcceptor
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  AcceptSession(...)
     |      AcceptSession(self: pydnp3.asiodnp3.ISessionAcceptor, sessionid: str, SOEHandler: pydnp3.opendnp3.ISOEHandler, application: pydnp3.opendnp3.IMasterApplication, config: pydnp3.asiodnp3.MasterStackConfig) -> pydnp3.asiodnp3.IMasterSession
     |      
     |      :return: shared_ptr to asiodnp3.IMasterSession
     |  
     |  __init__(...)
     |      __init__(self: pydnp3.asiodnp3.ISessionAcceptor) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class IStack(pydnp3.asiopal.IResource)
     |  Base class for masters or outstations.
     |  
     |  Method resolution order:
     |      IStack
     |      pydnp3.asiopal.IResource
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  Disable(...)
     |      Disable(self: pydnp3.asiodnp3.IStack) -> bool
     |      
     |      Synchronously disable communications.
     |  
     |  Enable(...)
     |      Enable(self: pydnp3.asiodnp3.IStack) -> bool
     |      
     |      Synchronously enable communications.
     |  
     |  GetStackStatistics(...)
     |      GetStackStatistics(self: pydnp3.asiodnp3.IStack) -> pydnp3.opendnp3.StackStatistics
     |      
     |      :return: stack statistics counters.
     |  
     |  __init__(...)
     |      __init__(self: pydnp3.asiodnp3.IStack) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pydnp3.asiopal.IResource:
     |  
     |  Shutdown(...)
     |      Shutdown(self: pydnp3.asiopal.IResource) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class MasterStackConfig(pybind11_builtins.pybind11_object)
     |  A composite configuration struct that contains all the config information for a dnp3 master stack.
     |  
     |  Method resolution order:
     |      MasterStackConfig
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__(self: pydnp3.asiodnp3.MasterStackConfig) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  link
     |      Link layer config.
     |  
     |  master
     |      Master config.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class MasterTCPServer(pydnp3.asiopal.TCPServer)
     |  Binds and listens on an IPv4 TCP port. Meant to be used exclusively as a shared_ptr.
     |  
     |  Method resolution order:
     |      MasterTCPServer
     |      pydnp3.asiopal.TCPServer
     |      pydnp3.asiopal.IListener
     |      pydnp3.asiopal.IResource
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  Create(...)
     |      Create(self: pydnp3.openpal.Logger, arg0: pydnp3.asiopal.Executor, arg1: pydnp3.asiopal.IPEndpoint, arg2: pydnp3.asiodnp3.IListenCallbacks, arg3: pydnp3.asiopal.ResourceManager, arg4: std::error_code) -> pydnp3.asiodnp3.MasterTCPServer
     |  
     |  __init__(...)
     |      __init__(self: pydnp3.asiodnp3.MasterTCPServer, logger: pydnp3.openpal.Logger, executor: pydnp3.asiopal.Executor, endpoint: pydnp3.asiopal.IPEndpoint, callbacks: pydnp3.asiodnp3.IListenCallbacks, manager: pydnp3.asiopal.ResourceManager, ec: std::error_code) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pydnp3.asiopal.TCPServer:
     |  
     |  Shutdown(...)
     |      Shutdown(self: pydnp3.asiopal.TCPServer) -> None
     |      
     |      Implement IListener.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class OutstationStackConfig(pybind11_builtins.pybind11_object)
     |  A composite configuration struct that contains all the config information for a dnp3 outstation stack.
     |  
     |  Method resolution order:
     |      OutstationStackConfig
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__(self: pydnp3.asiodnp3.OutstationStackConfig, dbSizes: pydnp3.opendnp3.DatabaseSizes) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Readonly properties defined here:
     |  
     |  dbConfig
     |      Configuration of the database.
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  link
     |      Link layer config.
     |  
     |  outstation
     |      Outstation config.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class PrintingChannelListener(IChannelListener)
     |  Callback interface for receiving information about a running channel.
     |  
     |  Method resolution order:
     |      PrintingChannelListener
     |      IChannelListener
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  OnStateChange(...)
     |      OnStateChange(self: pydnp3.asiodnp3.PrintingChannelListener, arg0: pydnp3.opendnp3.ChannelState) -> None
     |  
     |  __init__(...)
     |      __init__(self: pydnp3.asiodnp3.PrintingChannelListener) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  Create(...) from builtins.PyCapsule
     |      Create() -> pydnp3.asiodnp3.IChannelListener
     |      
     |      :return: shared_ptr to asiodnp3.IChannelListener
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class PrintingCommandCallback(pydnp3.openpal.StaticOnly)
     |  Method resolution order:
     |      PrintingCommandCallback
     |      pydnp3.openpal.StaticOnly
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  Get(...) from builtins.PyCapsule
     |      Get() -> Callable[[pydnp3.opendnp3.ICommandTaskResult], None]
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class PrintingSOEHandler(pydnp3.opendnp3.ISOEHandler)
     |  ISOEHandler singleton that prints to the console.
     |  
     |  Method resolution order:
     |      PrintingSOEHandler
     |      pydnp3.opendnp3.ISOEHandler
     |      pydnp3.opendnp3.ITransactable
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  Process(...)
     |      Process(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. Process(self: pydnp3.asiodnp3.PrintingSOEHandler, info: pydnp3.opendnp3.HeaderInfo, values: pydnp3.opendnp3.ICollectionIndexedBinary) -> None
     |      
     |      2. Process(self: pydnp3.asiodnp3.PrintingSOEHandler, info: pydnp3.opendnp3.HeaderInfo, values: pydnp3.opendnp3.ICollectionIndexedDoubleBitBinary) -> None
     |      
     |      3. Process(self: pydnp3.asiodnp3.PrintingSOEHandler, info: pydnp3.opendnp3.HeaderInfo, values: pydnp3.opendnp3.ICollectionIndexedAnalog) -> None
     |      
     |      4. Process(self: pydnp3.asiodnp3.PrintingSOEHandler, info: pydnp3.opendnp3.HeaderInfo, values: pydnp3.opendnp3.ICollectionIndexedCounter) -> None
     |      
     |      5. Process(self: pydnp3.asiodnp3.PrintingSOEHandler, info: pydnp3.opendnp3.HeaderInfo, values: pydnp3.opendnp3.ICollectionIndexedFrozenCounter) -> None
     |      
     |      6. Process(self: pydnp3.asiodnp3.PrintingSOEHandler, info: pydnp3.opendnp3.HeaderInfo, values: pydnp3.opendnp3.ICollectionIndexedBinaryOutputStatus) -> None
     |      
     |      7. Process(self: pydnp3.asiodnp3.PrintingSOEHandler, info: pydnp3.opendnp3.HeaderInfo, values: pydnp3.opendnp3.ICollectionIndexedAnalogOutputStatus) -> None
     |      
     |      8. Process(self: pydnp3.asiodnp3.PrintingSOEHandler, info: pydnp3.opendnp3.HeaderInfo, values: pydnp3.opendnp3.ICollectionIndexedOctetString) -> None
     |      
     |      9. Process(self: pydnp3.asiodnp3.PrintingSOEHandler, info: pydnp3.opendnp3.HeaderInfo, values: pydnp3.opendnp3.ICollectionIndexedTimeAndInterval) -> None
     |      
     |      10. Process(self: pydnp3.asiodnp3.PrintingSOEHandler, info: pydnp3.opendnp3.HeaderInfo, values: pydnp3.opendnp3.ICollectionIndexedBinaryCommandEvent) -> None
     |      
     |      11. Process(self: pydnp3.asiodnp3.PrintingSOEHandler, info: pydnp3.opendnp3.HeaderInfo, values: pydnp3.opendnp3.ICollectionIndexedAnalogCommandEvent) -> None
     |      
     |      12. Process(self: pydnp3.asiodnp3.PrintingSOEHandler, info: pydnp3.opendnp3.HeaderInfo, values: pydnp3.opendnp3.ICollectionIndexedSecurityStat) -> None
     |      
     |      13. Process(self: pydnp3.asiodnp3.PrintingSOEHandler, info: pydnp3.opendnp3.HeaderInfo, values: pydnp3.opendnp3.ICollectionDNPTime) -> None
     |  
     |  __init__(...)
     |      __init__(self: pydnp3.asiodnp3.PrintingSOEHandler) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods defined here:
     |  
     |  Create(...) from builtins.PyCapsule
     |      Create() -> pydnp3.opendnp3.ISOEHandler
     |      
     |      :return: shared_ptr to opendnp3.ISOEHandler
     |  
     |  ----------------------------------------------------------------------
     |  Methods inherited from pydnp3.opendnp3.ITransactable:
     |  
     |  End(...)
     |      End(self: pydnp3.opendnp3.ITransactable) -> None
     |  
     |  Start(...)
     |      Start(self: pydnp3.opendnp3.ITransactable) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class UpdateBuilder(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      UpdateBuilder
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  Build(...)
     |      Build(self: pydnp3.asiodnp3.UpdateBuilder) -> pydnp3.asiodnp3.Updates
     |  
     |  Modify(...)
     |      Modify(self: pydnp3.asiodnp3.UpdateBuilder, type: pydnp3.opendnp3.FlagsType, start: int, stop: int, flags: int) -> pydnp3.asiodnp3.UpdateBuilder
     |      
     |      :type start: unsigned short 
     |      :type stop: unsigned short 
     |      :type flags: unsigned char
     |  
     |  Update(...)
     |      Update(*args, **kwargs)
     |      Overloaded function.
     |      
     |      1. Update(self: pydnp3.asiodnp3.UpdateBuilder, measurement: pydnp3.opendnp3.Binary, index: int, mode: pydnp3.opendnp3.EventMode = EventMode.Detect) -> pydnp3.asiodnp3.UpdateBuilder
     |      
     |      :param mode: defaults to opendnp3.EventMode.Detect 
     |      :type index: unsigned short
     |      
     |      2. Update(self: pydnp3.asiodnp3.UpdateBuilder, measurement: pydnp3.opendnp3.DoubleBitBinary, index: int, mode: pydnp3.opendnp3.EventMode = EventMode.Detect) -> pydnp3.asiodnp3.UpdateBuilder
     |      
     |      :param mode: defaults to opendnp3.EventMode.Detect 
     |      :type index: unsigned short
     |      
     |      3. Update(self: pydnp3.asiodnp3.UpdateBuilder, measurement: pydnp3.opendnp3.Analog, index: int, mode: pydnp3.opendnp3.EventMode = EventMode.Detect) -> pydnp3.asiodnp3.UpdateBuilder
     |      
     |      :param mode: defaults to opendnp3.EventMode.Detect 
     |      :type index: unsigned short
     |      
     |      4. Update(self: pydnp3.asiodnp3.UpdateBuilder, measurement: pydnp3.opendnp3.Counter, index: int, mode: pydnp3.opendnp3.EventMode = EventMode.Detect) -> pydnp3.asiodnp3.UpdateBuilder
     |      
     |      :param mode: defaults to opendnp3.EventMode.Detect 
     |      :type index: unsigned short
     |      
     |      5. Update(self: pydnp3.asiodnp3.UpdateBuilder, measurement: pydnp3.opendnp3.FrozenCounter, index: int, mode: pydnp3.opendnp3.EventMode = EventMode.Detect) -> pydnp3.asiodnp3.UpdateBuilder
     |      
     |      :param mode: defaults to opendnp3.EventMode.Detect 
     |      :type index: unsigned short
     |      
     |      6. Update(self: pydnp3.asiodnp3.UpdateBuilder, measurement: pydnp3.opendnp3.BinaryOutputStatus, index: int, mode: pydnp3.opendnp3.EventMode = EventMode.Detect) -> pydnp3.asiodnp3.UpdateBuilder
     |      
     |      :param mode: defaults to opendnp3.EventMode.Detect 
     |      :type index: unsigned short
     |      
     |      7. Update(self: pydnp3.asiodnp3.UpdateBuilder, measurement: pydnp3.opendnp3.AnalogOutputStatus, index: int, mode: pydnp3.opendnp3.EventMode = EventMode.Detect) -> pydnp3.asiodnp3.UpdateBuilder
     |      
     |      :param mode: defaults to opendnp3.EventMode.Detect 
     |      :type index: unsigned short
     |      
     |      8. Update(self: pydnp3.asiodnp3.UpdateBuilder, measurement: pydnp3.opendnp3.TimeAndInterval, index: int) -> pydnp3.asiodnp3.UpdateBuilder
     |      
     |      :type index: unsigned short
     |  
     |  __init__(...)
     |      __init__(self: pydnp3.asiodnp3.UpdateBuilder) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class Updates(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      Updates
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  Apply(...)
     |      Apply(self: pydnp3.asiodnp3.Updates, handler: pydnp3.opendnp3.IUpdateHandler) -> None
     |  
     |  IsEmpty(...)
     |      IsEmpty(self: pydnp3.asiodnp3.Updates) -> bool
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class X509Info(pybind11_builtins.pybind11_object)
     |  Select information from a preverified x509 certificate that user can can inspect an optionally reject.
     |  
     |  Method resolution order:
     |      X509Info
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(...)
     |      __init__(self: pydnp3.asiodnp3.X509Info, depth: int, sha1thumbprint: pydnp3.openpal.RSlice, subjectName: str) -> None
     |  
     |  ----------------------------------------------------------------------
     |  Data descriptors defined here:
     |  
     |  depth
     |      The depth of the certificate in the chain.
     |  
     |  sha1thumbprint
     |      The sha1 thumbprint.
     |  
     |  subjectName
     |      The extracted subject name.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class is_error_code_enum(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      is_error_code_enum
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class shared_updates_t(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      shared_updates_t
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.
    
    class update_func_t(pybind11_builtins.pybind11_object)
     |  Method resolution order:
     |      update_func_t
     |      pybind11_builtins.pybind11_object
     |      builtins.object
     |  
     |  Methods defined here:
     |  
     |  __init__(self, /, *args, **kwargs)
     |      Initialize self.  See help(type(self)) for accurate signature.
     |  
     |  ----------------------------------------------------------------------
     |  Static methods inherited from pybind11_builtins.pybind11_object:
     |  
     |  __new__(*args, **kwargs) from pybind11_builtins.pybind11_type
     |      Create and return a new object.  See help(type) for accurate signature.

FUNCTIONS
    make_error_code(...) method of builtins.PyCapsule instance
        make_error_code(err: pydnp3.asiodnp3.Error) -> std::error_code

FILE
    (built-in)


